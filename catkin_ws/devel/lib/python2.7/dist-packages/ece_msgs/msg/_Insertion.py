# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ece_msgs/Insertion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ece_msgs.msg

class Insertion(genpy.Message):
  _md5sum = "445e7910d0486ca2159677b916542c18"
  _type = "ece_msgs/Insertion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Point d'insertion : 8 octet 
ReferencePosition point_insertion

# Confirmation insertion : 1 octet
bool confirmation_insertion
================================================================================
MSG: ece_msgs/ReferencePosition
int64 latitude # 0.1 micro degree
int64 longitude # 0.1 micro degree
int32 altitude

int64 LATITUDE_UNAVAILABLE = 900000001
int64 LONGITUDE_UNAVAILABLE = 1800000001
int32 ALTITUDE_UNAVAILABLE = 800001
"""
  __slots__ = ['point_insertion','confirmation_insertion']
  _slot_types = ['ece_msgs/ReferencePosition','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point_insertion,confirmation_insertion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Insertion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point_insertion is None:
        self.point_insertion = ece_msgs.msg.ReferencePosition()
      if self.confirmation_insertion is None:
        self.confirmation_insertion = False
    else:
      self.point_insertion = ece_msgs.msg.ReferencePosition()
      self.confirmation_insertion = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2qiB().pack(_x.point_insertion.latitude, _x.point_insertion.longitude, _x.point_insertion.altitude, _x.confirmation_insertion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point_insertion is None:
        self.point_insertion = ece_msgs.msg.ReferencePosition()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.point_insertion.latitude, _x.point_insertion.longitude, _x.point_insertion.altitude, _x.confirmation_insertion,) = _get_struct_2qiB().unpack(str[start:end])
      self.confirmation_insertion = bool(self.confirmation_insertion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2qiB().pack(_x.point_insertion.latitude, _x.point_insertion.longitude, _x.point_insertion.altitude, _x.confirmation_insertion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point_insertion is None:
        self.point_insertion = ece_msgs.msg.ReferencePosition()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.point_insertion.latitude, _x.point_insertion.longitude, _x.point_insertion.altitude, _x.confirmation_insertion,) = _get_struct_2qiB().unpack(str[start:end])
      self.confirmation_insertion = bool(self.confirmation_insertion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2qiB = None
def _get_struct_2qiB():
    global _struct_2qiB
    if _struct_2qiB is None:
        _struct_2qiB = struct.Struct("<2qiB")
    return _struct_2qiB
