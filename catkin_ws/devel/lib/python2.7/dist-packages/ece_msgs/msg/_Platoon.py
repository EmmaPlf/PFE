# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ece_msgs/Platoon.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ece_msgs.msg

class Platoon(genpy.Message):
  _md5sum = "b7532dcd39ebae5557f8abd6a9baa912"
  _type = "ece_msgs/Platoon"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID platoon : 3 bits
uint8 id_platoon

# ID autres véhicules platoon
IDs[] ids 

# Nombre de véhicules : 3 bits
uint8 nombre_vehicules

# Destination : 8 octets
ReferencePosition reference_position
================================================================================
MSG: ece_msgs/IDs
uint8 ID
uint8 position
================================================================================
MSG: ece_msgs/ReferencePosition
int64 latitude # 0.1 micro degree
int64 longitude # 0.1 micro degree
PositionConfidenceEllipse position_confidence
Altitude altitude

int64 LATITUDE_UNAVAILABLE = 900000001
int64 LONGITUDE_UNAVAILABLE = 1800000001

================================================================================
MSG: ece_msgs/PositionConfidenceEllipse
uint16 semi_major_confidence # cm
uint16 semi_minor_confidence # cm
uint16 semi_major_orientation # 0.1 degree

uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095

================================================================================
MSG: ece_msgs/Altitude
int32 value # 0.01 meter
uint8 confidence

int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0
int32 VALUE_ONE_CENTIMETER = 1
int32 VALUE_UNAVAILABLE = 800001

uint8 CONFIDENCE_1CM = 0
uint8 CONFIDENCE_2CM = 1
uint8 CONFIDENCE_5CM = 2
uint8 CONFIDENCE_10CM = 3
uint8 CONFIDENCE_20CM = 4
uint8 CONFIDENCE_50CM = 5
uint8 CONFIDENCE_1M = 6
uint8 CONFIDENCE_2M = 7
uint8 CONFIDENCE_5M = 8
uint8 CONFIDENCE_10M = 9
uint8 CONFIDENCE_20M = 10
uint8 CONFIDENCE_50M = 11
uint8 CONFIDENCE_100M = 12
uint8 CONFIDENCE_200M = 13
uint8 CONFIDENCE_OUT_OF_RANGE = 14
uint8 CONFIDENCE_UNAVAILABLE = 15
"""
  __slots__ = ['id_platoon','ids','nombre_vehicules','reference_position']
  _slot_types = ['uint8','ece_msgs/IDs[]','uint8','ece_msgs/ReferencePosition']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id_platoon,ids,nombre_vehicules,reference_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Platoon, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id_platoon is None:
        self.id_platoon = 0
      if self.ids is None:
        self.ids = []
      if self.nombre_vehicules is None:
        self.nombre_vehicules = 0
      if self.reference_position is None:
        self.reference_position = ece_msgs.msg.ReferencePosition()
    else:
      self.id_platoon = 0
      self.ids = []
      self.nombre_vehicules = 0
      self.reference_position = ece_msgs.msg.ReferencePosition()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.id_platoon))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ids:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.ID, _x.position))
      _x = self
      buff.write(_get_struct_B2q3HiB().pack(_x.nombre_vehicules, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ids is None:
        self.ids = None
      if self.reference_position is None:
        self.reference_position = ece_msgs.msg.ReferencePosition()
      end = 0
      start = end
      end += 1
      (self.id_platoon,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ids = []
      for i in range(0, length):
        val1 = ece_msgs.msg.IDs()
        _x = val1
        start = end
        end += 2
        (_x.ID, _x.position,) = _get_struct_2B().unpack(str[start:end])
        self.ids.append(val1)
      _x = self
      start = end
      end += 28
      (_x.nombre_vehicules, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence,) = _get_struct_B2q3HiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.id_platoon))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ids:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.ID, _x.position))
      _x = self
      buff.write(_get_struct_B2q3HiB().pack(_x.nombre_vehicules, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ids is None:
        self.ids = None
      if self.reference_position is None:
        self.reference_position = ece_msgs.msg.ReferencePosition()
      end = 0
      start = end
      end += 1
      (self.id_platoon,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ids = []
      for i in range(0, length):
        val1 = ece_msgs.msg.IDs()
        _x = val1
        start = end
        end += 2
        (_x.ID, _x.position,) = _get_struct_2B().unpack(str[start:end])
        self.ids.append(val1)
      _x = self
      start = end
      end += 28
      (_x.nombre_vehicules, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence,) = _get_struct_B2q3HiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2q3HiB = None
def _get_struct_B2q3HiB():
    global _struct_B2q3HiB
    if _struct_B2q3HiB is None:
        _struct_B2q3HiB = struct.Struct("<B2q3HiB")
    return _struct_B2q3HiB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
