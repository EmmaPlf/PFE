// Generated by gencpp from file ece_msgs/Insertion.msg
// DO NOT EDIT!


#ifndef ECE_MSGS_MESSAGE_INSERTION_H
#define ECE_MSGS_MESSAGE_INSERTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ece_msgs/ReferencePosition.h>

namespace ece_msgs
{
template <class ContainerAllocator>
struct Insertion_
{
  typedef Insertion_<ContainerAllocator> Type;

  Insertion_()
    : reference_position()
    , confirmation_insertion(false)  {
    }
  Insertion_(const ContainerAllocator& _alloc)
    : reference_position(_alloc)
    , confirmation_insertion(false)  {
  (void)_alloc;
    }



   typedef  ::ece_msgs::ReferencePosition_<ContainerAllocator>  _reference_position_type;
  _reference_position_type reference_position;

   typedef uint8_t _confirmation_insertion_type;
  _confirmation_insertion_type confirmation_insertion;





  typedef boost::shared_ptr< ::ece_msgs::Insertion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ece_msgs::Insertion_<ContainerAllocator> const> ConstPtr;

}; // struct Insertion_

typedef ::ece_msgs::Insertion_<std::allocator<void> > Insertion;

typedef boost::shared_ptr< ::ece_msgs::Insertion > InsertionPtr;
typedef boost::shared_ptr< ::ece_msgs::Insertion const> InsertionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ece_msgs::Insertion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ece_msgs::Insertion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ece_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ece_msgs': ['/home/user/catkin_ws/src/ece_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::Insertion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::Insertion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::Insertion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::Insertion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::Insertion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::Insertion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ece_msgs::Insertion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e657a43fd2874194e72382f85cbab1d";
  }

  static const char* value(const ::ece_msgs::Insertion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e657a43fd287419ULL;
  static const uint64_t static_value2 = 0x4e72382f85cbab1dULL;
};

template<class ContainerAllocator>
struct DataType< ::ece_msgs::Insertion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ece_msgs/Insertion";
  }

  static const char* value(const ::ece_msgs::Insertion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ece_msgs::Insertion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Point d'insertion : 8 octet \n\
ReferencePosition reference_position\n\
\n\
# Confirmation insertion : 1 bits\n\
bool confirmation_insertion\n\
================================================================================\n\
MSG: ece_msgs/ReferencePosition\n\
int64 latitude # 0.1 micro degree\n\
int64 longitude # 0.1 micro degree\n\
PositionConfidenceEllipse position_confidence\n\
Altitude altitude\n\
\n\
int64 LATITUDE_UNAVAILABLE = 900000001\n\
int64 LONGITUDE_UNAVAILABLE = 1800000001\n\
\n\
================================================================================\n\
MSG: ece_msgs/PositionConfidenceEllipse\n\
uint16 semi_major_confidence # cm\n\
uint16 semi_minor_confidence # cm\n\
uint16 semi_major_orientation # 0.1 degree\n\
\n\
uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094\n\
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095\n\
\n\
================================================================================\n\
MSG: ece_msgs/Altitude\n\
int32 value # 0.01 meter\n\
uint8 confidence\n\
\n\
int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0\n\
int32 VALUE_ONE_CENTIMETER = 1\n\
int32 VALUE_UNAVAILABLE = 800001\n\
\n\
uint8 CONFIDENCE_1CM = 0\n\
uint8 CONFIDENCE_2CM = 1\n\
uint8 CONFIDENCE_5CM = 2\n\
uint8 CONFIDENCE_10CM = 3\n\
uint8 CONFIDENCE_20CM = 4\n\
uint8 CONFIDENCE_50CM = 5\n\
uint8 CONFIDENCE_1M = 6\n\
uint8 CONFIDENCE_2M = 7\n\
uint8 CONFIDENCE_5M = 8\n\
uint8 CONFIDENCE_10M = 9\n\
uint8 CONFIDENCE_20M = 10\n\
uint8 CONFIDENCE_50M = 11\n\
uint8 CONFIDENCE_100M = 12\n\
uint8 CONFIDENCE_200M = 13\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 14\n\
uint8 CONFIDENCE_UNAVAILABLE = 15\n\
";
  }

  static const char* value(const ::ece_msgs::Insertion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ece_msgs::Insertion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reference_position);
      stream.next(m.confirmation_insertion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Insertion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ece_msgs::Insertion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ece_msgs::Insertion_<ContainerAllocator>& v)
  {
    s << indent << "reference_position: ";
    s << std::endl;
    Printer< ::ece_msgs::ReferencePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_position);
    s << indent << "confirmation_insertion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confirmation_insertion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECE_MSGS_MESSAGE_INSERTION_H
